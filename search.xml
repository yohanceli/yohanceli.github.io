<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue组件化实践</title>
    <url>/2020/05/30/vue-component-based-practice/</url>
    <content><![CDATA[<h1 id="Vue-组件化实践"><a href="#Vue-组件化实践" class="headerlink" title="Vue 组件化实践"></a>Vue 组件化实践</h1><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>vue 组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用界面都可以抽象为一个组件树（见下图）。组件化的好处是显而易见的，它能提高开发效率，方便复用，简化调试步骤，提升项目可维护性，便于多人协同开发……</p>
<p><img src="https://cn.vuejs.org/images/components.png" alt="Component Tree"></p>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>父给子传值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child</span></span><br><span class="line">props: &#123;</span><br><span class="line">  msg: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;hello-world msg=<span class="string">"这是一条来自老爹的消息"</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="事件侦听器-emit-on"><a href="#事件侦听器-emit-on" class="headerlink" title="事件侦听器$emit/$on"></a>事件侦听器$emit/$on</h3><p>子给父传值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'getMoney'</span>, money)</span><br><span class="line"></span><br><span class="line"><span class="comment">//parent</span></span><br><span class="line">&lt;son @getMoney=<span class="string">"$event"</span> /&gt;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">this</span>.$on(<span class="string">'getMoney'</span>, (e) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h3><p>任意两个组件之间传值通常用事件总线或<code>vuex</code>的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Comp1</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"foo"</span>)</span><br><span class="line"><span class="comment">// Comp2</span></span><br><span class="line"><span class="keyword">this</span>.$on(<span class="string">"foo"</span>, handle)</span><br></pre></td></tr></table></figure>

<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>创建唯一的全局数据管理仓库<code>Store</code>，通过它管理数据并通知组件状态变更。</p>
<blockquote>
<p>后期专门写一篇关于<code>Vuex</code>的内容，这里不做过多赘述。</p>
</blockquote>
<h3 id="parent-root"><a href="#parent-root" class="headerlink" title="$parent/$root"></a>$parent/$root</h3><p>兄弟组件之间通信可以通过共同的祖辈牵线搭桥，$parent或者$root。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// brother1</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$emit(<span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// brother2</span></span><br><span class="line"><span class="keyword">this</span>.$parent.$on(<span class="string">'foo'</span>, handle)</span><br></pre></td></tr></table></figure>

<h3 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h3><p>父组件可以通过<code>$children</code>访问子组件，实现父子通信。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent</span></span><br><span class="line"><span class="keyword">this</span>.$children[<span class="number">0</span>].xxx = xxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，<code>$children</code>并不保证顺序，也不是响应式的。</p>
</blockquote>
<h3 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h3><p>获取子节点的引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent</span></span><br><span class="line">&lt;hello-world ref=<span class="string">"hw"</span> /&gt;</span><br><span class="line"></span><br><span class="line">mounted() &#123; <span class="keyword">this</span>.$refs.hw.xxx = xxx &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>$refs</code>和<code>$children</code>有什么区别？</p>
<p>简单来说，<code>$refs</code>可以引用<strong>原生节点和自定义组件</strong>，<code>$children</code>只能引用<strong>自定义组件</strong>。</p>
</blockquote>
<h3 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h3><p>包含了父作用域中<strong>不作为 prop 被识别</strong>(且获取)的特性绑定(<code>class</code>和<code>style</code>除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定(<code>class</code>和<code>style</code>除外)，并且可以通过<code>v-bind=&quot;$attrs&quot;</code>传入内部组件——在创建高阶组件时非常有用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// child：并未在props中声明foo</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;$attrs.foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// parent</span><br><span class="line"><span class="tag">&lt;<span class="name">hello-world</span> <span class="attr">foo</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 属性展开</span><br><span class="line"><span class="tag">&lt;<span class="name">grandson</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>/&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>v-bind 会把$attrs 做属性展开，变成键值对的形式，传入孙子组件中</p>
</blockquote>
<h3 id="listener"><a href="#listener" class="headerlink" title="$listener"></a>$listener</h3><p>包含了父作用域中的(不含<code>.native</code>修饰器的)<code>v-on</code>事件监听器。它可以通过<code>v-on=&quot;$listener&quot;</code>传入内部组件——同样在创建更高层次的组件中非常有用。这里举个简单的例子。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 孙子组件 - GrandSon</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('sendMsg', '来自孙子的消息')"</span>&gt;</span>我要给爷爷发消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父母组件 - Parent</span><br><span class="line"><span class="tag">&lt;<span class="name">templete</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是孩子他爸<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GrandSon</span> <span class="attr">v-on</span>=<span class="string">"$listener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 爷爷组件</span><br><span class="line"><span class="tag">&lt;<span class="name">templete</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是孩子他大爷<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Parent</span> @<span class="attr">sendMsg</span>=<span class="string">"onSendMsg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// ...</span></span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onSendMsg(msg) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(msg) <span class="comment">// 来自孙子的消息</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h3><p>能够实现祖先和后代之间的传值（跨层级的）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ancestor</span></span><br><span class="line">provide() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">foo</span>: <span class="string">'foo'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// descendant</span></span><br><span class="line">inject: [<span class="string">'foo'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽 slot"></a>插槽 slot</h3><p>插槽语法是 Vue 内部的一套内容分发 API，将<code>&lt;slot&gt;</code>作为承载分发内容的入口。它用于复合组件的开发。该技术在通用组件库开发中有大量应用。</p>
<h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Comp1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Parent</span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>将内容分发到指定位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Comp2</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Parent</span><br><span class="line"><span class="tag">&lt;<span class="name">comp2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认插槽用default做参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 具名插槽用插槽名做参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">templete</span> <span class="attr">v-slot:content</span>&gt;</span>内容...<span class="tag">&lt;/<span class="name">templete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>分发内容要用到子组件的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Comp3</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:foo</span>=<span class="string">"foo"</span> <span class="attr">:bar</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Parent</span><br><span class="line"><span class="tag">&lt;<span class="name">comp3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">    来自子组件的数据：&#123;&#123;slotProps.foo&#125;&#125; - &#123;&#123;slotProps.bar&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实现通用表单组件"><a href="#实现通用表单组件" class="headerlink" title="实现通用表单组件"></a>实现通用表单组件</h2><p>根据<a href="[https://element.eleme.cn/#/zh-CN/component/form](https://element.eleme.cn/#/zh-CN/component/form)">ElementUI 表单</a>，做简单需求分析后，我们主要实现三个组件<code>LForm</code>、<code>LFormItem</code>、<code>LInput</code>，它们各司其职。</p>
<ul>
<li><code>LForm</code><ul>
<li>收集数据</li>
<li>校验规则</li>
</ul>
</li>
<li><code>LFormItem</code><ul>
<li>label 标签增加</li>
<li>执行校验</li>
<li>错误信息展示</li>
</ul>
</li>
<li><code>LInput</code><ul>
<li>维护数据</li>
</ul>
</li>
</ul>
<p>###实现 LInput</p>
<p>实现自定义组件的双向绑定</p>
<p>创建<code>components/form/LInput.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-model的本质就是绑定value属性，并且监听一个input事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"onInput"</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    inheritAttrs: <span class="literal">false</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">""</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onInput(event) &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// event是原生DOM事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">"input"</span>, event.target.value)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://cn.vuejs.org/v2/api/#inheritAttrs" target="_blank" rel="noopener">inheritAttrs 官方介绍</a></p>
</blockquote>
<h3 id="使用-LInput"><a href="#使用-LInput" class="headerlink" title="使用 LInput"></a>使用 LInput</h3><p>创建<code>component/form/index.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LForm表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LInput</span> <span class="attr">v-model</span>=<span class="string">"model.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">LInput</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LInput</span> <span class="attr">v-model</span>=<span class="string">"model.password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">LInput</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> LInput <span class="keyword">from</span> <span class="string">"./LInput"</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      LInput,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        model: &#123; username: <span class="string">""</span>, password: <span class="string">""</span> &#125;,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现-LFormItem"><a href="#实现-LFormItem" class="headerlink" title="实现 LFormItem"></a>实现 LFormItem</h3><p>创建<code>components/form/LFormItem.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-if</span>=<span class="string">"label"</span>&gt;</span>&#123;&#123;label&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"error"</span>&gt;</span>&#123;&#123;error&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      label: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">""</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      prop: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 字段名</span></span></span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">""</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        error: <span class="string">""</span>, <span class="comment">// 校验错误信息</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-LFormItem"><a href="#使用-LFormItem" class="headerlink" title="使用 LFormItem"></a>使用 LFormItem</h3><p>更新<code>component/form/index.vue</code>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LForm表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LFormItem</span> <span class="attr">label</span>=<span class="string">"用户名"</span> <span class="attr">prop</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LInput</span> <span class="attr">v-model</span>=<span class="string">"model.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">LInput</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LFormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LFormItem</span> <span class="attr">label</span>=<span class="string">"密码"</span> <span class="attr">prop</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">LInput</span> <span class="attr">v-model</span>=<span class="string">"model.password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">LInput</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LFormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LFormItem</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"submitForm"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LFormItem</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现-LForm"><a href="#实现-LForm" class="headerlink" title="实现 LForm"></a>实现 LForm</h3><p>创建<code>components/form/LForm.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    provide() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        form: <span class="keyword">this</span>, <span class="comment">// 将组件实例作为提供者，子代组件可方便获取</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      model: &#123; <span class="attr">type</span>: <span class="built_in">Object</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">      rules: &#123; <span class="attr">type</span>: <span class="built_in">Object</span> &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-Lform"><a href="#使用-Lform" class="headerlink" title="使用 Lform"></a>使用 Lform</h3><p>更新<code>component/form/index.vue</code>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LForm表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LForm</span> <span class="attr">:model</span>=<span class="string">"model"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"loginForm"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LForm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> LForm <span class="keyword">from</span> <span class="string">"./LForm"</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      LForm,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        rules: &#123;</span><br><span class="line"><span class="actionscript">          username: [&#123; required: <span class="literal">true</span>, message: <span class="string">"请输入用户名"</span> &#125;],</span></span><br><span class="line"><span class="actionscript">          password: [&#123; required: <span class="literal">true</span>, message: <span class="string">"请输入密码"</span> &#125;],</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p><code>LInput</code>通知校验</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onInput(event) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当数据发生变化，执行校验</span></span><br><span class="line">  <span class="comment">// $parent指LFormItem</span></span><br><span class="line">  <span class="keyword">this</span>.$parnet.$emit(<span class="string">'validate'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里为什么要用<code>$parent</code>来派发事件呢？因为<code>validate</code>这个事件是由<code>LInput</code>派发的，谁派发谁监听。在<code>LFormItem</code>中，正常来讲，事件是由<code>LInput</code>自己监听：<code>&lt;LInput @validate=&quot;some handle&quot; /&gt;</code>，但是<code>LFormItem</code>中并没有<code>LInput</code>，只有一个<code>slot</code>插槽，我们没法在<code>slot</code>上监听事件。所以这里借助<code>LInput</code>的老爹<code>LFormItem</code>来派发事件，然后自己监听。</p>
<p><code>LFormItem</code>监听校验通知，获取规则并执行校验</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">inject: [<span class="string">'form'</span>], <span class="comment">// 注入</span></span><br><span class="line">mounted()&#123;<span class="comment">// 监听校验事件</span></span><br><span class="line">	<span class="keyword">this</span>.$on(<span class="string">'validate'</span>, () =&gt; &#123; <span class="keyword">this</span>.validate() &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  validate() &#123;</span><br><span class="line">	<span class="comment">// 获取对应FormItem校验规则</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.form.rules[<span class="keyword">this</span>.prop]);</span><br><span class="line">    <span class="comment">// 获取校验值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.form.model[<span class="keyword">this</span>.prop]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>安装<code>async-validator</code>：<code>yarn add async-validator</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">"async-validator"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    validate() &#123;</span><br><span class="line">      <span class="comment">// 获取对应FormItem校验规则</span></span><br><span class="line">      <span class="keyword">const</span> rules = <span class="keyword">this</span>.form.rules[<span class="keyword">this</span>.prop]</span><br><span class="line">      <span class="comment">// 获取校验值</span></span><br><span class="line">      <span class="keyword">const</span> value = <span class="keyword">this</span>.form.model[<span class="keyword">this</span>.prop]</span><br><span class="line">      <span class="comment">// 创建校验器</span></span><br><span class="line">      <span class="keyword">const</span> schema = <span class="keyword">new</span> Schema(&#123; [<span class="keyword">this</span>.prop]: rules &#125;)</span><br><span class="line">      <span class="comment">// 返回Promise，没有触发catch就说明验证通过</span></span><br><span class="line">      <span class="keyword">return</span> schema.validate(&#123; [<span class="keyword">this</span>.prop]: value &#125;, (errors) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">          <span class="comment">// 将错误信息显示</span></span><br><span class="line">          <span class="keyword">this</span>.error = errors[<span class="number">0</span>].message</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 校验通过，清空以前可能存在的错误</span></span><br><span class="line">          <span class="keyword">this</span>.error = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>表单全局验证，为 <code>LForm</code>提供<code>validate</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局校验</span></span><br><span class="line">validate(callback) &#123;</span><br><span class="line">  <span class="comment">// 1.调用所有含有prop属性的子组件的validate方法并得到Promise数组[Promise, ..., ...]</span></span><br><span class="line">  <span class="keyword">const</span> task = <span class="keyword">this</span>.$children</span><br><span class="line">  .filter(<span class="function"><span class="params">item</span> =&gt;</span> item.prop)</span><br><span class="line">  .map(<span class="function"><span class="params">item</span> =&gt;</span> item.validate())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.执行所有Formitem中的校验方法，如果大家的Promise全部都resolve，校验通过</span></span><br><span class="line">  <span class="comment">// 如果其中有reject，则校验失败</span></span><br><span class="line">  <span class="built_in">Promise</span>.all(task)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callback(<span class="literal">true</span>)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callback(<span class="literal">false</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>component/form/index.vue</code>中调用<code>LForm</code>的<code>validate</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  submitForm() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[<span class="string">"loginForm"</span>].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        alert(<span class="string">"请求登录!"</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"校验失败!"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>以上，完成了一个通用表单组件的所有功能。</p>
<p>总结一下，使用<code>:value</code>和<code>@input</code>实现了自定义组件的双向绑定功能；通过<code>$attrs</code>实现了对原生 input 标签属性的继承；使用<code>slot</code>插槽实现了内容分发；用到了<code>provide/inject</code>的跨层级的组件通信，以及<code>$emit/$on/$parent/$chilren</code>，来实现整个表单的校验功能……</p>
<p>但是，作为一个<strong>通用表单组件</strong>，以上有没有完成<strong>「通用」</strong>这个使命呢？有哪些点可以进一步优化？</p>
<h2 id="深度优化"><a href="#深度优化" class="headerlink" title="深度优化"></a>深度优化</h2><p>我在使用<code>element UI</code>的时候，发现无论你如何改变表单结构，功能都是完好的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果把自己的表单组件结构改成上述那样，那么很不幸，当用户输入时，校验功能已经不生效了……</p>
<p>回过头来看一下<code>KInput</code>组件是如何派发<code>validate</code>事件通知的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onInput(event) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当数据发生变化，执行校验</span></span><br><span class="line">  <span class="keyword">this</span>.$parent.$emit(<span class="string">"validate"</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>凶手就显而易见了…就是这里的<code>$parent</code>产生了耦合，当<code>HTML</code>结构发生变化时，<code>LInput</code>的父组件就不再是<code>LFormItem</code>了，功能就失效了。这个耦合就造成了组件通用性的丧失。</p>
<p>去看一下<code>element UI</code>是如何解决这个问题的。</p>
<p>在<a href="[https://gitee.com/mirrors/element-ui/blob/master/src/mixins/emitter.js](https://gitee.com/mirrors/element-ui/blob/master/src/mixins/emitter.js)">element-ui/src/mixins/emitter.js</a>文件中，实现了两个混入方法，<code>boardcast</code>和<code>dispatch</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 广播：自上而下的派发事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">componentName, eventName, params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历所有的子元素，如果子元素的componentName和传入的相同，则派发事件</span></span><br><span class="line">  <span class="keyword">this</span>.$children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = child.$options.componentName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name === componentName) &#123;</span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat([params]))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 类似于冒泡，自下而上的查找componentName相同的组件，并派发事件</span></span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      <span class="keyword">var</span> parent = <span class="keyword">this</span>.$parent || <span class="keyword">this</span>.$root</span><br><span class="line">      <span class="keyword">var</span> name = parent.$options.componentName</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 向上查找直到找到相同名称的组件，调出循环</span></span><br><span class="line">      <span class="keyword">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        parent = parent.$parent</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">          name = parent.$options.componentName</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果找到就派发事件</span></span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log([eventName].concat(params))</span><br><span class="line"></span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(<span class="keyword">this</span>, componentName, eventName, params)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重构一下组件。</p>
<ol>
<li><p>添加<code>emitter.js</code>文件</p>
</li>
<li><p>在<code>LInput</code>中配置混入，并调用<code>dispatch</code>方法进行事件派发</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">"@/mixins/emitter"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  mixins: [emitter],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput() &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">this</span>.dispatch(<span class="string">"LFormItem"</span>, <span class="string">"validate"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>LFormItem</code>实例中自定义<code>property</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  componentName: <span class="string">"LFormItem"</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<p>以上就完成了对<code>$parent</code>的改造。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
